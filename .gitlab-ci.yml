stages:
  - install
  - test
  - Cache
  - build
  - security
  - build-image
  - scan

default:
  image: node:20-buster-slim

install_dependencies:
  stage: install
  script:
    - npm install  # Install frontend project dependencies

variables:
  REPORT_FILENAME: gl-sast-report.json
  MAX_IMAGE_SIZE_MB: 225
  MAX_SCAN_DURATION_SECONDS: 100

include:
  - https://gitlab.com/gitlab-org/security-products/ci-templates/raw/master/includes-dev/analyzer.yml
  - project: 'gitlab-org/security-products/ci-templates'
    ref: 'master'
    file: '/includes-dev/upsert-git-tag.yml'

integration-test:
  image:
    name: registry.gitlab.com/gitlab-org/security-products/analyzers/integration-test:stable
  services:
    - docker:20.10-dind
  variables:
    TMP_IMAGE: $CI_REGISTRY_IMAGE/tmp:$CI_COMMIT_SHA$IMAGE_TAG_SUFFIX
  script:
    - rspec -f d

node-Modules-cache:
  stage: Cache
  script:
    - echo "This job uses a cache."
  cache:
    key: binaries-cache
    paths:
      - node_modules/

build-Frontend:
  stage: build
  cache:
    key:
      files:
        - node.modules
    paths:
      - .
  script:
    - echo "Building frontend application"
    - cd frontend
    - npm install
    - npm run build

build-backend:
  stage: build
  cache:
    key:
      files:
        - node.modules
  script:
    - npm uninstall -g babel
    - npm install --save-dev babel-cli
    - npm install  # Install project dependencies
    - npx babel backend -d dist  # Run the build command directly
    
build-Image_frontend:
  stage: build-image
  cache:
    key:
      files:
        - node.modules
    paths:
      - frontend/
  image: docker:24.0.6
  services:
    - docker:24.0.6-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - cd frontend
    - apk add --no-cache git  # Install Git
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USER" --password-stdin
  script:
    - docker build -t elboukhariyoucef/my_stock_pro:mystockFrontend .
    - docker push elboukhariyoucef/my_stock_pro:mystockFrontend

build-image-Backend:
  stage: build-image
  cache:
    key:
      files:
        - node.modules
    paths:
      - backend/
  image: docker:24.0.6
  services:
    - docker:24.0.6-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - cd backend
    - apk add --no-cache git  # Install Git
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USER" --password-stdin
  script:
    - docker build -t elboukhariyoucef/my_stock_pro:mystockBackend .
    - docker push elboukhariyoucef/my_stock_pro:mystockBackend
scan_frontend_Image:
  stage: scan
  script:
    - echo "Running container scanning job for the frontend"
  variables:
    CS_IMAGE: elboukhariyoucef/my_stock_pro:mystockFrontend

scan_backend_image:
  stage: scan
  script:
    - echo "Running container scanning job for the backtend"
  variables:
    CS_IMAGE: elboukhariyoucef/my_stock_pro:mystockBackend
